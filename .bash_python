#
# NOTE: For publishing on `https` i.e., secure protocols, refer usage@ https://github.com/sahilrajput03/skype-bot-with-heroku-webhook-for-build-notifications/
# NOTE: Flask produciton server do not refresh on file changes. For automatic server restart  PLEASE USE `fk.debug` script) visible on public ips on the network
# Start production
alias fk.startProduction='flask run'
# Start produciton (accessible from all local addresses)
alias fk.startProductionPublic='flask run --host=0.0.0.0'
# Below `debugpy` scripts are inspired from article: https://medium.com/@lassebenninga/how-to-debug-flask-running-in-docker-compose-in-vs-code-ef37f0f516ee
# Also, vscode uses `debugpy` from its extensions to load vscode python debugger and attach to it for its flask debug scripts. Yo ~Sahil
# Below script will the server on file changes and vscode's ("""FYI: saved to my vscode settings""") "Python: Remote Attach" launch's configuration will autoconnect to it:
alias fk.debug='python -m debugpy --listen 0.0.0.0:5678 -m flask --debug run --host=0.0.0.0'
alias fk.debugWaitForClientDebuggerToAttach='python -m debugpy --wait-for-client --listen 0.0.0.0:5678 -m flask --debug run --host=0.0.0.0'
# Below script will reload the server on file changes:
alias fk.debugRaw='flask --debug run'

# Inspired from flask's installation: https://flask.palletsprojects.com/en/2.2.x/installation/#install-flask
# Inspred from Heroku's python project setup: https://devcenter.heroku.com/articles/getting-started-with-python#install-app-dependencies-locally
# Awesome flask docs: https://flask.palletsprojects.com/en/2.2.x/quickstart/#a-minimal-application
# Createa venv folder and set it up
alias vv.createEnv_step1='python3 -m venv venv' 
# FROM HEROKU: python3 -m venv --upgrade-deps venv
# Before start working on the project make sure to run this activateEnvironment command. (To deactivate later you can simply run `deactivate` command)
alias vv.activateEnvironment_step2='. venv/bin/activate'
alias vv.installDependencies_step3='pip install -r requirements.txt'
# 
# FYI: Tekena uses `pip freeze` only to create requirements.txt file
# NOTE: This always *overwrites* previous `requirements.txt` file.
alias vv.updateRequirements.txt='pip freeze > requirements.txt'
# Creates only used dependencies in the project (install `pipreqs `pip install pipreqs`
alias pipreqs.createRequirementsFile='pipreqs'

# LEARN `python vs. `python3`
# $ python --version
# OUTPUT: Python 3.10.6
# $ python3 --version
# OUTPUT: Python 3.10.6

alias upgradePip='pip install --upgrade pip'
